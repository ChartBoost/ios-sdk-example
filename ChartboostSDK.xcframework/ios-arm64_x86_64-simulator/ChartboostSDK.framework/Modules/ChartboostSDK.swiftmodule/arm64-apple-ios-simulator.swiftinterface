// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ChartboostSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import ChartboostSDK
import CoreGraphics
import CoreTelephony
import Foundation
import SafariServices
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension ChartboostSDK.CHBMediation : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias RedirectionURLFinished = (url: Foundation.URL, redirected: Swift.Bool)
@objc(CHBCacheErrorCode) public enum CacheErrorCode : Swift.Int {
  case internalError
  case internetUnavailable
  case networkFailure
  case noAdFound
  case sessionNotStarted
  case assetDownloadFailure
  case publisherDisabled
  case serverError
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CHBCacheError) public class CacheError : Foundation.NSError {
  public var cacheCode: ChartboostSDK.CacheErrorCode? {
    get
  }
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(CHBShowErrorCode) public enum ShowErrorCode : Swift.Int {
  case internalError
  case sessionNotStarted
  case internetUnavailable
  case presentationFailure
  case noCachedAd
  case noViewController
  case noAdInstance
  case assetsFailure
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CHBShowError) public class ShowError : Foundation.NSError {
  public var showCode: ChartboostSDK.ShowErrorCode? {
    get
  }
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(CHBClickErrorCode) public enum ClickErrorCode : Swift.Int {
  case uriInvalid
  case uriUnrecognized
  case internalError
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CHBClickError) public class ClickError : Foundation.NSError {
  public var clickCode: ChartboostSDK.ClickErrorCode? {
    get
  }
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(CHBStartErrorCode) public enum StartErrorCode : Swift.Int {
  case invalidCredentials
  case networkFailure
  case serverError
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CHBStartError) public class StartError : Foundation.NSError {
  public var startCode: ChartboostSDK.StartErrorCode? {
    get
  }
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.NSError {
  @objc dynamic public func trackDescription() -> Swift.String
}
extension ChartboostSDK.CacheErrorCode : Swift.Equatable {}
extension ChartboostSDK.CacheErrorCode : Swift.Hashable {}
extension ChartboostSDK.CacheErrorCode : Swift.RawRepresentable {}
extension ChartboostSDK.ShowErrorCode : Swift.Equatable {}
extension ChartboostSDK.ShowErrorCode : Swift.Hashable {}
extension ChartboostSDK.ShowErrorCode : Swift.RawRepresentable {}
extension ChartboostSDK.ClickErrorCode : Swift.Equatable {}
extension ChartboostSDK.ClickErrorCode : Swift.Hashable {}
extension ChartboostSDK.ClickErrorCode : Swift.RawRepresentable {}
extension ChartboostSDK.StartErrorCode : Swift.Equatable {}
extension ChartboostSDK.StartErrorCode : Swift.Hashable {}
extension ChartboostSDK.StartErrorCode : Swift.RawRepresentable {}
